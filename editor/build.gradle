import java.util.function.BiConsumer

apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = ["src/"]

project.ext.mainClassName = "com.coffeebland.cossinlette3.editor.EditorLauncher"
project.ext.assetsDir = new File("../core/assets");
project.ext.workingDir = new File("build/libs");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.workingDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-editor"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [kind: 'src', path: 'assets']);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}

task extern << {
    /*packExtern(new File("core"), new BiConsumer<File, File>() {
        @Override
        void accept(File packed, File extra) {
            File target = new File("editor/build/libs")
            extra.listFiles().each { File file -> copyFiles(file, new File(target, file.getName())) }
            packed.listFiles().each { File file -> copyFiles(file, new File(target, file.getName())) }
        }
    })*/
    packExtern(new File("editor"), new BiConsumer<File, File>() {
        @Override
        void accept(File packed, File extra) {
            File target = new File("editor/build/libs")
            extra.listFiles().each { File file -> copyFiles(file, new File(target, file.getName())) }
            packed.listFiles().each { File file -> copyFiles(file, new File(target, file.getName())) }
        }
    })
}
import com.badlogic.gdx.tools.texturepacker.TexturePacker
import com.badlogic.gdx.utils.StreamUtils

import java.util.function.Consumer

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath "com.badlogicgames.gdx:gdx-tools:1.6.3"
    }
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = '1.0'
    ext {
        appName = 'Cossin Lette 3 : RÃ©demption'
        gdxVersion = '1.6.3'
        roboVMVersion = '1.0.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.3.1'
        aiVersion = '1.5.0'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":desktop") {
    apply plugin: "java"

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"
    }
}

project(":editor") {
    apply plugin: "java"

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"
    }
}

project(":core") {
    apply plugin: "java"

    dependencies {
        compile fileTree(dir: "libs", include: "*.jar")

        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
    }
}

void packExtern(File working, Consumer<File> after = null) {
    System.out.println("Packing extern for " + working.getPath())
    def externRaw = new File(working, "extern_raw")
    def externPacked = new File(working, "extern_packed")

    System.out.println("Clearing packed")
    for (File file : externPacked.listFiles()) {
        System.out.println("Removing " + file.getName())
        if (file.isDirectory()) GFileUtils.deleteDirectory(file)
        else file.delete()
    }

    System.out.println("Packing raw textures")
    def rawImgs = new File(externRaw, "img")
    def packedImgs = new File(externPacked, "img")
    packFiles(rawImgs, packedImgs);

    if (after != null) after.accept(externPacked)
}
void packFiles(File src, File target) {
    src.listFiles().each ({ File child ->
        File pack = new File(child, "pack.json")
        if (pack.exists()) {
            TexturePacker.process(
                    child.getPath(),
                    target.getPath(),
                    child.getName()
            )
            child.listFiles(new FileFilter() {
                @Override
                boolean accept(File file) {
                    return !file.getName().equals("pack.json") && file.getName().endsWith(".json")
                }
            }).each({ File extra ->
                File extraTarget = new File(target, extra.getName());
                InputStream is = new FileInputStream(extra);
                OutputStream os = new FileOutputStream(extraTarget);
                StreamUtils.copyStream(is, os);
                StreamUtils.closeQuietly(is);
                StreamUtils.closeQuietly(os);
            })
        } else {
            packFiles(child, new File(target, child.getName()))
        }
    })
}
void copyFiles(File src, File target) {
    if (src.isDirectory()) {
        for (File srcChild : src.listFiles()) {
            copyFiles(srcChild, new File(target, srcChild.getName()));
        }
    } else {
        if (!target.getParentFile().exists() && !target.getParentFile().mkdirs()) {
            throw new RuntimeException("Couln'd create parent directory")
        }
        if (!target.exists() && !target.createNewFile()) {
            throw new RuntimeException("Couln'd create file")
        }
        InputStream is = new FileInputStream(src)
        OutputStream os = new FileOutputStream(target)
        StreamUtils.copyStream(is, os)
    }
}

tasks.eclipse.doLast {
    delete ".project"
}
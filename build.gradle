import com.badlogic.gdx.tools.texturepacker.TexturePacker
import com.badlogic.gdx.utils.Json
import com.badlogic.gdx.utils.JsonReader
import com.badlogic.gdx.utils.StreamUtils

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath "com.badlogicgames.gdx:gdx-tools:1.6.3"
    }
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = '1.0'
    ext {
        appName = 'Cossin Lette 3 : RÃ©demption'
        gdxVersion = '1.6.3'
        roboVMVersion = '1.0.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.3.1'
        aiVersion = '1.5.0'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":desktop") {
    apply plugin: "java"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"
    }
}

project(":editor") {
    apply plugin: "java"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"
    }
}

project(":core") {
    apply plugin: "java"

    dependencies {
        compile fileTree(dir: "libs", include: "*.jar")

        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
    }
}

task packTextures << {
    System.out.println("Packing game textures");
    File target = new File('core/assets/img/game');
    for (File file : target.listFiles()) {
        file.delete();
    }

    File raw = new File('core/assets_raw/game');
    File[] children = raw.listFiles(new FileFilter() {
        @Override
        boolean accept(File file) {
            return file.isDirectory()
        }
    });

    TexturePacker.Settings settings = new TexturePacker.Settings();
    File settingsFile = new File(raw, "pack.json");
    new Json().readFields(settings, new JsonReader().parse(new FileReader(settingsFile)));

    for (File child : children) {
        File[] extras = child.listFiles(new FileFilter() {
            @Override
            boolean accept(File file) {
                String[] parts = file.getName().split("\\.");
                return parts.length >= 2 && ("charset".equals(parts[1]) || "tileset".equals(parts[1]));
            }
        });
        TexturePacker.process(
                settings,
                child.getPath(),
                target.getPath(),
                child.getName()
        );
        for (File extra : extras) {
            System.out.println("Transferring extra: " + extra.getName());
            File extraTarget = new File(target, extra.getName());
            InputStream is = new FileInputStream(extra);
            OutputStream os = new FileOutputStream(extraTarget);
            StreamUtils.copyStream(is, os);
            StreamUtils.closeQuietly(is);
            StreamUtils.closeQuietly(os);
        }
    }

    System.out.println("Packing editor textures");
    TexturePacker.process(
            'core/assets_raw/editor',
            'core/assets/img/editor',
            'main'
    )
}

tasks.eclipse.doLast {
    delete ".project"
}